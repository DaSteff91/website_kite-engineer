name: Dev - Build, Push to GHCR and Deploy on Server

on:
  push:
    branches:
      - dev
      - development

jobs:
  get-and-wait:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Get the latest run ID of the target workflow
      - name: Get Target Workflow Run ID
        id: get-run-id
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflowFileName = "release_dev.yml";
            const branch = "dev";

            // Get the most recent run of the target workflow
            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflowFileName,
              branch,
              event: "push",
              status: "in_progress",
              per_page: 1,
            });

            if (runs.data.workflow_runs.length === 0) {
              console.log('No matching runs found.');
              return '';
            }

            const runId = runs.data.workflow_runs[0].id;
            console.log(`Found Run ID: ${runId}`);
            return runId;
          result-encoding: string

      - name: Wait for Workflow Completion
        if: steps.get-run-id.outputs.result != ''
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GH_PACKAGE_TOKEN }}
          runId: ${{ steps.get-run-id.outputs.result }}
          intervalSeconds: 10 
          timeoutSeconds: 600
  
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout the repository code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PACKAGE_TOKEN }}
          persist-credentials: false
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PACKAGE_TOKEN }}

      - name: Get current version tag
        id: get_tag
        run: |
          CURRENT_TAG=$(git tag --points-at HEAD)
          echo "Current tag: $CURRENT_TAG"
          echo "tag=${CURRENT_TAG}" >> $GITHUB_OUTPUT
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/dasteff91/ghcr-test
          tags: |
            type=raw,value=${{ steps.get_tag.outputs.tag }},enable=${{ steps.get_tag.outputs.tag != '' }}
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/dasteff91/ghcr-test
          tags: |
            type=raw,value=${{ steps.get_tag.outputs.tag }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/dev' }}

      - name: Verify Dockerfile
        run: |
          echo "=== Dockerfile Contents ==="
          cat Dockerfile
          echo "=========================="

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_CLIENTVAR=clientvar
          target: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

  deploy:
    name: Deploy to server
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH and Deploy to Server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_PRIVATE_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            IMAGE_TAG=${{ github.ref_name }}
            TARGET=$([ "${{ github.ref }}" = "refs/heads/main" ] && echo "prod" || echo "dev")
            CONTAINER_NAME=www${TARGET:+-dev}.kite-engineer.de
            PORT_HOST=$([ "$TARGET" = "prod" ] && echo 3000 || echo 3001)

            docker login ghcr.io -u ${{ secrets.GHCR_USER }} -p ${{ secrets.GHCR_TOKEN }}


            docker pull ghcr.io/dasteff91/website_kite-engineer:$IMAGE_TAG
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            docker run -d \
              --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              -p $PORT_HOST:3000 \
              --env-file /home/steff_deployment/website_kite-engineer/.env \
              ghcr.io/dasteff91/website_kite-engineer:$IMAGE_TAG
